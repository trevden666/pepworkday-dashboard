name: E2E Tests

on:
  # Run on pull requests
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'pepworkday-pipeline/**'
      - '.github/workflows/e2e-tests.yml'
  
  # Run on push to main
  push:
    branches: [ main ]
    paths:
      - 'pepworkday-pipeline/**'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      environment:
        description: 'Environment to test'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: 0

jobs:
  # Lint and type check
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: pepworkday-pipeline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: pepworkday-pipeline/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Type check
      run: npx tsc --noEmit --skipLibCheck
      continue-on-error: true
  
  # E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    defaults:
      run:
        working-directory: pepworkday-pipeline
    
    strategy:
      fail-fast: false
      matrix:
        browser: 
          - ${{ github.event.inputs.browser == 'all' && 'chromium' || github.event.inputs.browser || 'chromium' }}
          - ${{ github.event.inputs.browser == 'all' && 'firefox' || '' }}
          - ${{ github.event.inputs.browser == 'all' && 'webkit' || '' }}
        exclude:
          - browser: ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: pepworkday-pipeline/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_ENABLE_ANALYTICS: false
    
    - name: Start application
      run: npm start &
      env:
        NODE_ENV: production
        PORT: 3000
        SHEET_ID: ${{ secrets.TEST_SHEET_ID || 'test-sheet-id' }}
    
    - name: Wait for application
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/api/summary; do sleep 2; done'
      continue-on-error: true
    
    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}
        path: |
          pepworkday-pipeline/test-results/
          pepworkday-pipeline/playwright-report/
          pepworkday-pipeline/test-summary.json
        retention-days: 7
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: pepworkday-pipeline/playwright-report/
        retention-days: 7
  
  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    defaults:
      run:
        working-directory: pepworkday-pipeline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: pepworkday-pipeline/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install chromium
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_ENABLE_ANALYTICS: false
    
    - name: Start application
      run: npm start &
      env:
        NODE_ENV: production
        PORT: 3000
    
    - name: Wait for application
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_SERVER_BASE_URL: http://localhost:3000
  
  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    defaults:
      run:
        working-directory: pepworkday-pipeline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: pepworkday-pipeline/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for vulnerabilities
      run: |
        npx audit-ci --moderate
      continue-on-error: true
  
  # Deployment preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [e2e-tests, performance-tests]
    defaults:
      run:
        working-directory: pepworkday-pipeline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: pepworkday-pipeline
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Preview deployment ready! Check out the changes at the preview URL.'
          })

  # Test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts
    
    - name: Generate summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f test-artifacts/*/test-summary.json ]; then
          echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "✅ E2E tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Test results and reports are available in the artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "- Playwright HTML report contains detailed test execution information" >> $GITHUB_STEP_SUMMARY
